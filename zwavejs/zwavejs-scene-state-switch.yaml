blueprint:
  name: Zwavejs scene state switch
  description: Automation blueprint for z-wave switches supporting scene selection
    from up/down button
  domain: automation
  input:
    node_name:
      name: Name of the zwavejs entity
      description: Enter the name configured to the device in zwavejs
    mqtt_device:
      name: MQTT switch
      description: List of available MQTT entities. This list is intended for reference only.
        At this time, it is not known how to or if we can obtain the nodeName
        and nodeLocation from the device used to filter the events.
      selector:
        device:
          integration: mqtt
          entity:
            domain: sensor
    node_location:
      name: Location of the zwavejs entity
      description: Enter the location name configured to the device in zwavejs
    key_up:
      name: Key Up/On press 1x
      description: Action to run, when the button is pressed one time.
      default: []
      selector:
        action: {}
    key_down:
      name: Key Down/Off press 1x
      description: Action to run, when the button is pressed one time.
      default: []
      selector:
        action: {}
    key_up_held:
      name: Key Up/On held down
      description: Action to run, when the button is held down.
      default: []
      selector:
        action: {}
    key_down_held:
      name: Key Down/Off held down
      description: Action to run, when the button is held down.
      default: []
      selector:
        action: {}
    key_up_released:
      name: Key Up/On released
      description: Action to run, when the button is released.
      default: []
      selector:
        action: {}
    key_down_released:
      name: Key Down/Off released
      description: Action to run, when the button is released.
      default: []
      selector:
        action: {}
    key_up2:
      name: Key Up/On press 2x
      description: Action to run, when the button is pressed two times.
      default: []
      selector:
        action: {}
    key_down2:
      name: Key Down/Off press 2x
      description: Action to run, when the button is pressed two times.
      default: []
      selector:
        action: {}
    key_up3:
      name: Key Up/On press 3x
      description: Action to run, when the button is pressed three times.
      default: []
      selector:
        action: {}
    key_down3:
      name: Key Down/Off press 3x
      description: Action to run, when the button is pressed three times.
      default: []
      selector:
        action: {}
    key_up4:
      name: Key Up/On press 4x
      description: Action to run, when the button is pressed four times.
      default: []
      selector:
        action: {}
    key_down4:
      name: Key Down/Off press 4x
      description: Action to run, when the button is pressed four times.
      default: []
      selector:
        action: {}
    key_up5:
      name: Key Up/On press 5x
      description: Action to run, when the button is pressed five times.
      default: []
      selector:
        action: {}
    key_down5:
      name: Key Down/Off press 5x
      description: Action to run, when the button is pressed five times.
      default: []
      selector:
        action: {}
mode: single
max_exceeded: silent
variables:
  node_name: !input 'node_name'
  node_location: !input 'node_location'
trigger:
- platform: event
  event_type: state_changed
condition: '{{ trigger.event.data.new_state.attributes.nodeName == (node_name | string) and trigger.event.data.new_state.attributes.nodeLocation == (node_location | string) }}'
action:
- variables:
    scene_id: '{{ (trigger.event.data.new_state.attributes.propertyKey | int) }}'
    state_value_id: '{{ trigger.event.data.new_state.state }}'
- choose:
  - conditions: '{{ scene_id == 2 and state_value_id == 0 }}'
    sequence: !input 'key_up'
  - conditions: '{{ scene_id == 1 and state_value_id == 0 }}'
    sequence: !input 'key_down'
  - conditions: '{{ scene_id == 2 and state_value_id == 1 }}'
    sequence: !input 'key_up_released'
  - conditions: '{{ scene_id == 1 and state_value_id == 1 }}'
    sequence: !input 'key_down_released'
  - conditions: '{{ scene_id == 2 and state_value_id == 2 }}'
    sequence: !input 'key_up_held'
  - conditions: '{{ scene_id == 1 and state_value_id == 2 }}'
    sequence: !input 'key_down_held'
  - conditions: '{{ scene_id == 2 and state_value_id == 3 }}'
    sequence: !input 'key_up2'
  - conditions: '{{ scene_id == 1 and state_value_id == 3 }}'
    sequence: !input 'key_down2'
  - conditions: '{{ scene_id == 2 and state_value_id == 4 }}'
    sequence: !input 'key_up3'
  - conditions: '{{ scene_id == 1 and state_value_id == 4 }}'
    sequence: !input 'key_down3'
  - conditions: '{{ scene_id == 2 and state_value_id == 5 }}'
    sequence: !input 'key_up4'
  - conditions: '{{ scene_id == 1 and state_value_id == 5 }}'
    sequence: !input 'key_down4'
  - conditions: '{{ scene_id == 2 and state_value_id == 6 }}'
    sequence: !input 'key_up5'
  - conditions: '{{ scene_id == 1 and state_value_id == 6 }}'
    sequence: !input 'key_down5'
