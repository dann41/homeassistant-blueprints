blueprint:
  name: Z-WaveJS swtich
  description: Automation blueprint for Z-Wave switches that support scene selection
    from an up/down button and multiple key press gestures
  domain: automation
  input:
    zwavejs_device_id:
      name: Z-Wave JS switch
      description: Select the sensor device which offers scene selection.
        Listed devices are not guaranteed to work with any/all of these button mappings.
      selector:
        device:
          integration: zwave_js
          entity:
            domain: sensor
    is_key_up_scene_two:
      name: Key Up/Down scene
      description: The key-up scene button varies for some devices. Toggle this scene value
        when the up/down buttons are backwards.
      default: true
      selector:
        boolean:
    key_up:
      name: Key Up/On press 1x
      description: Action to run, when the button is pressed one time.
      default: []
      selector:
        action: {}
    key_down:
      name: Key Down/Off press 1x
      description: Action to run, when the button is pressed one time.
      default: []
      selector:
        action: {}
    key_up_held:
      name: Key Up/On held down
      description: Action to run, when the button is held down.
      default: []
      selector:
        action: {}
    key_down_held:
      name: Key Down/Off held down
      description: Action to run, when the button is held down.
      default: []
      selector:
        action: {}
    key_up_released:
      name: Key Up/On released
      description: Action to run, when the button is released.
      default: []
      selector:
        action: {}
    key_down_released:
      name: Key Down/Off released
      description: Action to run, when the button is released.
      default: []
      selector:
        action: {}
    key_up_2x:
      name: Key Up/On press 2x
      description: Action to run, when the button is pressed two times.
      default: []
      selector:
        action: {}
    key_down_2x:
      name: Key Down/Off press 2x
      description: Action to run, when the button is pressed two times.
      default: []
      selector:
        action: {}
    key_up_3x:
      name: Key Up/On press 3x
      description: Action to run, when the button is pressed three times.
      default: []
      selector:
        action: {}
    key_down_3x:
      name: Key Down/Off press 3x
      description: Action to run, when the button is pressed three times.
      default: []
      selector:
        action: {}
    key_up_4x:
      name: Key Up/On press 4x
      description: Action to run, when the button is pressed four times.
      default: []
      selector:
        action: {}
    key_down_4x:
      name: Key Down/Off press 4x
      description: Action to run, when the button is pressed four times.
      default: []
      selector:
        action: {}
    key_up_5x:
      name: Key Up/On press 5x
      description: Action to run, when the button is pressed five times.
      default: []
      selector:
        action: {}
    key_down_5x:
      name: Key Down/Off press 5x
      description: Action to run, when the button is pressed five times.
      default: []
      selector:
        action: {}
mode: single
max_exceeded: silent
variables:
  zwavejs_device_id: !input 'zwavejs_device_id'
  is_key_up_scene_two: !input 'is_key_up_scene_two'
  key_up_scene_id: '{{ (1,2)[is_key_up_scene_two] }}'
  key_down_scene_id: '{{ (2,1)[is_key_up_scene_two] }}'
trigger:
- platform: event
  event_type: zwave_js_event
condition: '{{ trigger.event.data.device_id == (zwavejs_device_id | string) and trigger.event.data.command_class == 91 }}'
action:
- variables:
    scene_id: '{{ (trigger.event.data.property_key_name | int) }}' # values 001,002 and sometimes 003
    is_key_up: '{{ scene_id == ( key_up_scene_id | int ) }}'
    is_key_down: '{{ scene_id == ( key_down_scene_id | int ) }}'
    key_pressed: '{{ trigger.event.data.value }}'
- choose:
  - conditions: '{{ is_key_up and key_pressed == "KeyPressed" }}'
    sequence: !input 'key_up'
  - conditions: '{{ is_key_down and key_pressed == "KeyPressed" }}'
    sequence: !input 'key_down'
  - conditions: '{{ is_key_up and key_pressed == "KeyReleased" }}'
    sequence: !input 'key_up_released'
  - conditions: '{{ is_key_down and key_pressed == "KeyReleased" }}'
    sequence: !input 'key_down_released'
  - conditions: '{{ is_key_up and key_pressed == "KeyHeldDown" }}'
    sequence: !input 'key_up_held'
  - conditions: '{{ is_key_down and key_pressed == "KeyHeldDown" }}'
    sequence: !input 'key_down_held'
  - conditions: '{{ is_key_up and key_pressed == "KeyPressed2x" }}'
    sequence: !input 'key_up_2x'
  - conditions: '{{ is_key_down and key_pressed == "KeyPressed2x" }}'
    sequence: !input 'key_down_2x'
  - conditions: '{{ is_key_up and key_pressed == "KeyPressed3x" }}'
    sequence: !input 'key_up_3x'
  - conditions: '{{ is_key_down and key_pressed == "KeyPressed3x" }}'
    sequence: !input 'key_down_3x'
  - conditions: '{{ is_key_up and key_pressed == "KeyPressed4x" }}'
    sequence: !input 'key_up_4x'
  - conditions: '{{ is_key_down and key_pressed == "KeyPressed4x" }}'
    sequence: !input 'key_down_4x'
  - conditions: '{{ is_key_up and key_pressed == "KeyPressed5x" }}'
    sequence: !input 'key_up_5x'
  - conditions: '{{ is_key_down and key_pressed == "KeyPressed5x" }}'
    sequence: !input 'key_down_5x'
